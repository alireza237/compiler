README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should contain the following files:

 Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [cool root]/src/PA2/lextest.cc
 mycoolc         -> [cool root]/PA2/mycoolc
 stringtab.cc    -> [cool root]/PA2/stringtab.cc
 utilities.cc    -> [cool root]/PA2/utilities.cc
 handle_flags.cc -> [cool root]/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[cool root]/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. 

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% make lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% make dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	If you change architectures you must issue

	% make clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------

Alireza---Qanbari--610396130

در این فایل به توضیح کد cool.felx میپردازیم .
ابتدا برای تمام syntax هایی که در فایل cool-parser.h است یک definiation تعیین می کنیم همچنین برای تمزی کار "*)" و "(*" را نیز تعریف می کنیم و حال طبق همون فایل cool-parser.h مقدار مورد نظر را برمی گردانیم همچنین یک white تعریف می کنیم برای فاصله های اضافی 
Comment: برای کامنت ابتدا یک متغیر n تعریف کرده تا بتوانیم بالانس بودن تعداد شروع و پایان کامنت ها را در نظر بگیرم و هر موقع که در ان کامنتی اغاز شد "*)" و تمام نشد ارور مورد نظر را که در cool_yylval.erroe_messge قرار دهد و همین طور برعکس اگر کامنتی بسته شد در صورتی که اغاز نشده بود ارور بدهد و برای  کامنت با از یک condition به اسم <comment> استفاده کردیم که هر موقع در این این condition  بودیم هر چیزی که خوندیم لازم نیست چیزی برگردانیم مگر انکه \n که در اون صورت باید شماره خط را اضافه کرد و البته این هم باید در نظر بگیرید که اگر در کامنت EOF دید نیز باید ارور بدهد 
String: ابتدا برای string با دو condition <esc> و <string>  ابتدا برای این کار وقتی هر موقع در خارج از condition به “ بر خورد کردیم یعنی رشته با اغاز شده و با این رشته هماره در یک ارایه قرار می دهیم و یک پوینتر نیز در ان قرار دادیم حال وقتی مشاهده کردیم که طول string بیشتر از 1025 شد باید ارور بدهد و <ESC> را فعال کند در غیر این صورت وقتی در <string> ما " دیدم ان وقت باید متن مورد نظر را داخل string table قرار دهد همچنین <INTIAl> که به معنی پایان یافتن <string> است را فعال کند همچنین در رشته هر موقع بدون انکه " را برای پایان دادن رشته ببینم به خط بعدی برویم این ارور است همچنین مانند کامنت در اینجا ارور EOF نیز داریم و <ESC> را فعال کند همچنین باید چک شود که null character نداشته باشم همچنین باید هر موقع در رشته “\\n”,”\\t”,”\\b”,”\\f” دیدم به ‘\n’,’\t’,’\b’,’\f’  تبدیل کنیم همچنین برای چک کردن طول استرینگ نیز یک متغیر به نام n1 تعریف کرده تا هر موقع که حروفی از استرینگ خوندیم به ان یک عدد اضافه کند همچنین در هر کجا ابن طول به ماکسیمم رسید و اگر خواست باز هم چیزی بخواند دچار ارور می شود.
همچنین ما برای int ,type.object نیز یک regex نوشتیم و باید ان ها را با توجه به جدول ها و تابع هایی که در stringtab نوشته شده است قرار بدهیم و همچنین با این کار می توان به cool_yyval.symbol اختصاص دهیم 
همچنین در اخر هر چیزی که باقی مانده است مانند < یک ارور محسبوب می شود و طبق اولویت ها اگر چیزی در برنامه ما بود و نتوانست با تمام regex های ما مطابقت کند eror بر میگرداند 

همچنین ما یک condition  به نام ESC قرار است اگر رشته به null  و یا طولانی بود   تا اخر رشته برود و کاری نکند زیرا در غیر این صورت  بعد از این که رشته طولش بیشتر از حد مجاز می شد بقیه رشته را lex  می کرد

test.cl:
#5 CLASS
#5 TYPEID CellularAutomaton
#5 INHERITS
#5 TYPEID IO
#5 '{'
#6 OBJECTID population_map
#6 ':'
#6 TYPEID String
#6 ';'
#8 OBJECTID init
#8 '('
#8 OBJECTID map
#8 ':'
#8 TYPEID Strijjjrng
#8 ')'
#8 ':'
#8 TYPEID SELF_TYPE
#8 '{'
#9 '{'
#10 OBJECTID population_map
#10 ASSIGN
#10 OBJECTID map
#10 ';'
#11 OBJECTID self
#11 ';'
#12 '}'
#13 '}'
#13 ';'
#15 OBJECTID print
#15 '('
#15 ')'
#15 ':'
#15 TYPEID SELF_TYPE
#15 '{'
#16 '{'
#17 OBJECTID out_string
#17 '('
#17 OBJECTID population_map
#17 '.'
#17 OBJECTID concat
#17 '('
#17 STR_CONST "\n"
#17 ')'
#17 ')'
#17 ';'
#18 OBJECTID self
#18 ';'
#19 '}'
#20 '}'
#20 ';'
#22 OBJECTID num_cells
#22 '('
#22 ')'
#22 ':'
#22 TYPEID Int
#22 '{'
#23 OBJECTID population_map
#23 '.'
#23 OBJECTID length
#23 '('
#23 ')'
#24 '}'
#24 ';'
#26 OBJECTID cell
#26 '('
#26 OBJECTID position
#26 ':'
#26 TYPEID Int
#26 ')'
#26 ':'
#26 TYPEID String
#26 '{'
#27 OBJECTID population_map
#27 '.'
#27 OBJECTID substr
#27 '('
#27 OBJECTID position
#27 ','
#27 INT_CONST 1
#27 ')'
#28 '}'
#28 ';'
#30 OBJECTID cell_left_neighbor
#30 '('
#30 OBJECTID position
#30 ':'
#30 TYPEID Int
#30 ')'
#30 ':'
#30 TYPEID String
#30 '{'
#31 IF
#31 OBJECTID position
#31 '='
#31 INT_CONST 0
#31 THEN
#32 OBJECTID cell
#32 '('
#32 OBJECTID num_cells
#32 '('
#32 ')'
#32 '-'
#32 INT_CONST 1
#32 ')'
#33 ELSE
#34 OBJECTID cell
#34 '('
#34 OBJECTID position
#34 '-'
#34 INT_CONST 1
#34 ')'
#35 FI
#36 '}'
#36 ';'
#38 OBJECTID cell_right_neighbor
#38 '('
#38 OBJECTID position
#38 ':'
#38 TYPEID Int
#38 ')'
#38 ':'
#38 TYPEID String
#38 '{'
#39 IF
#39 OBJECTID position
#39 '='
#39 OBJECTID num_cells
#39 '('
#39 ')'
#39 '-'
#39 INT_CONST 1
#39 THEN
#40 OBJECTID cell
#40 '('
#40 INT_CONST 0
#40 ')'
#41 ELSE
#42 OBJECTID cell
#42 '('
#42 OBJECTID position
#42 '+'
#42 INT_CONST 1
#42 ')'
#43 FI
#44 '}'
#44 ';'
#48 OBJECTID cell_at_next_evolution
#48 '('
#48 OBJECTID position
#48 ':'
#48 TYPEID Int
#48 ')'
#48 ':'
#48 TYPEID String
#48 '{'
#49 IF
#49 '('
#49 IF
#49 OBJECTID cell
#49 '('
#49 OBJECTID position
#49 ')'
#49 '='
#49 STR_CONST "X"
#49 THEN
#49 INT_CONST 1
#49 ELSE
#49 INT_CONST 0
#49 FI
#50 '+'
#50 IF
#50 OBJECTID cell_left_neighbor
#50 '('
#50 OBJECTID position
#50 ')'
#50 '='
#50 STR_CONST "X"
#50 THEN
#50 INT_CONST 1
#50 ELSE
#50 INT_CONST 0
#50 FI
#51 '+'
#51 IF
#51 OBJECTID cell_right_neighbor
#51 '('
#51 OBJECTID position
#51 ')'
#51 '='
#51 STR_CONST "X"
#51 THEN
#51 INT_CONST 1
#51 ELSE
#51 INT_CONST 0
#51 FI
#52 '='
#52 INT_CONST 1
#52 ')'
#53 THEN
#54 STR_CONST "X"
#55 ELSE
#56 ERROR "'"
#56 '.'
#56 ERROR "'"
#57 FI
#58 '}'
#58 ';'
#60 OBJECTID evolve
#60 '('
#60 ')'
#60 ':'
#60 TYPEID SELF_TYPE
#60 '{'
#61 '('
#61 LET
#61 OBJECTID position
#61 ':'
#61 TYPEID Int
#61 IN
#62 '('
#62 LET
#62 OBJECTID num
#62 ':'
#62 TYPEID Int
#62 ASSIGN
#62 OBJECTID num_cells
#62 ERROR "["
#62 ERROR "]"
#62 IN
#63 '('
#63 LET
#63 OBJECTID temp
#63 ':'
#63 TYPEID String
#63 IN
#64 '{'
#65 WHILE
#65 OBJECTID position
#65 '<'
#65 OBJECTID num
#65 LOOP
#66 '{'
#67 OBJECTID temp
#67 ASSIGN
#67 OBJECTID temp
#67 '.'
#67 OBJECTID concat
#67 '('
#67 OBJECTID cell_at_next_evolution
#67 '('
#67 OBJECTID position
#67 ')'
#67 ')'
#67 ';'
#68 OBJECTID position
#68 ASSIGN
#68 OBJECTID position
#68 '+'
#68 INT_CONST 1
#68 ';'
#69 '}'
#70 POOL
#70 ';'
#71 OBJECTID population_map
#71 ASSIGN
#71 OBJECTID temp
#71 ';'
#72 OBJECTID self
#72 ';'
#73 '}'
#74 ')'
#74 ')'
#74 ')'
#75 '}'
#75 ';'
#76 '}'
#76 ';'
#78 CLASS
#78 TYPEID Main
#78 '{'
#79 OBJECTID cells
#79 ':'
#79 TYPEID CellularAutomaton
#79 ';'
#81 OBJECTID main
#81 '('
#81 ')'
#81 ':'
#81 TYPEID SELF_TYPE
#81 '{'
#82 '{'
#83 OBJECTID cells
#83 ASSIGN
#83 '('
#83 NEW
#83 TYPEID CellularAutomaton
#83 ')'
#83 '.'
#83 OBJECTID init
#83 '('
#83 STR_CONST "         X         "
#83 ')'
#83 ';'
#84 OBJECTID cells
#84 '.'
#84 OBJECTID print
#84 '('
#84 ')'
#84 ';'
#85 '('
#85 LET
#85 OBJECTID countdown
#85 ':'
#85 TYPEID Int
#85 ASSIGN
#85 INT_CONST 20
#85 IN
#86 WHILE
#86 OBJECTID countdown
#86 ERROR ">"
#86 INT_CONST 0
#86 LOOP
#87 '{'
#88 OBJECTID cells
#88 '.'
#88 OBJECTID evolve
#88 '('
#88 ')'
#88 ';'
#89 OBJECTID cells
#89 '.'
#89 OBJECTID print
#89 '('
#89 ')'
#89 ';'
#90 OBJECTID countdown
#90 ASSIGN
#90 OBJECTID countdown
#90 '-'
#90 INT_CONST 1
#90 ';'
#92 POOL
#93 ')'
#93 ';'
#98 ERROR "EOF in comment"




